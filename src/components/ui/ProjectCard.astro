---
import GithubIcon from '@/components/ui/icons/GithubIcon.astro'
import Link from '@/components/ui/Link.astro'
import Tag from '@/components/ui/Tag.astro'

const { title, description, publicLink, codeLink, tags, image } = Astro.props
---

<div
  class="interactive-card relative flex flex-col rounded-md border border-neutral-800 px-3 py-4 shadow-sm transition-colors duration-300 ease-in-out hover:border-neutral-700"
  style="--x: 50%; --y: 50%;"
>
  <div class="flex flex-col space-y-3">
    <div class="flex w-full items-center justify-between">
      <div class="flex items-center space-x-2.5">
        {image && <img src={image.src} alt={image.alt} class="h6 w-6" />}
        {
          publicLink ? (
            <Link
              link={publicLink}
              classes={{
                linkClass:
                  'group flex items-center gap-[6px] font-medium decoration-neutral-500 decoration-dotted underline-offset-[5px] hover:underline',
                iconClass:
                  'h-3.25 w-3.25 opacity-50 duration-200 group-hover:translate-x-[1.5px] group-hover:opacity-100',
              }}
              showArrow={true}
            />
          ) : (
            <p class="font-medium">{title}</p>
          )
        }
      </div>
      {
        codeLink && (
          <a href={codeLink} target="_blank" rel="noopener">
            <GithubIcon class="h-4 w-6 fill-neutral-400 transition-colors duration-200 hover:fill-white" />
          </a>
        )
      }
    </div>
    <p class="truncate text-sm text-neutral-400">{description}</p>
    <div class="flex items-center space-x-1 overflow-x-auto">
      {tags.map((tag: string) => <Tag tag={tag} />)}
    </div>
  </div>
</div>

<style>
  .interactive-card:hover {
    background-image: radial-gradient(circle at var(--x) var(--y), #232323, transparent 300px);
    transition: ease-in-out 300ms;
    will-change: background-image;
  }
</style>

<script type="module">
  if (typeof window !== 'undefined') {
    document.querySelectorAll('.interactive-card').forEach((card) => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect()
        const x = e.clientX - rect.left
        const y = e.clientY - rect.top
        card.style.setProperty('--x', `${x}px`)
        card.style.setProperty('--y', `${y}px`)
      })

      card.addEventListener('mouseleave', () => {
        card.style.setProperty('--x', `50%`)
        card.style.setProperty('--y', `50%`)
      })
    })
  }
</script>
